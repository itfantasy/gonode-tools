package dicts

import (
	"sync"
)

type Dict<K,V> struct {
	_map map[<K>]<V>
	sync.RWMutex
}

func NewDict<K,V>() *Dict<K,V> {
	dict := Dict<K,V>{}
	dict._map = make(map[<K>]<V>)
	return &dict
}

func NewDict<K,V>Raw(raw map[<K>]<V>) *Dict<K,V> {
	dict := Dict<K,V>{}
	dict._map = raw
	return &dict
}

func (d *Dict<K,V>) Add(key <K>, value <V>) bool {
	d.Lock()
	defer d.Unlock()

	_, exist := d._map[key]
	if exist {
		return false
	}
	d._map[key] = value
	return true
}

func (d *Dict<K,V>) Remove(key <K>) bool {
	d.Lock()
	defer d.Unlock()

	_, exist := d._map[key]
	if exist {
		delete(d._map, key)
		return true
	}
	return false
}

func (d *Dict<K,V>) Set(key <K>, value <V>) {
	d.Lock()
	defer d.Unlock()

	d._map[key] = value
}

func (d *Dict<K,V>) Get(key <K>) (<V>, bool) {
	d.RLock()
	defer d.RUnlock()

	v, exist := d._map[key]
	return v, exist
}

func (d *Dict<K,V>) Len() int {
	d.RLock()
	defer d.RUnlock()

	return len(d._map)
}

func (d *Dict<K,V>) ContainsKey(key <K>) bool {
	d.RLock()
	defer d.RUnlock()

	_, exist := d._map[key]
	return exist
}

func (d *Dict<K,V>) ContainsValue(value <V>) bool {
	d.RLock()
	defer d.RUnlock()

	for _, v := range d._map {
		if v == value {
			return true
		}
	}
	return false
}

func (d *Dict<K,V>) ForEach(fun func(<K>, <V>)) {
	d.RLock()
	defer d.RUnlock()

	for k, v := range d._map {
		fun(k, v)
	}
}

func (d *Dict<K,V>) KeyValuePairs() map[<K>]<V> {
	d.RLock()
	defer d.RUnlock()

	ret := make(map[<K>]<V>)
	for k, v := range d._map {
		ret[k] = v
	}
	return ret
}

func (d *Dict<K,V>) Clear() {
	d.Lock()
	defer d.Unlock()

	for k, _ := range d._map {
		delete(d._map, k)
	}
}
